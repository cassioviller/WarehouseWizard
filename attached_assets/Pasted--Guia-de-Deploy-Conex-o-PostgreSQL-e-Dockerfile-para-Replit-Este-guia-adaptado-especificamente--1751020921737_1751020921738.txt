# Guia de Deploy, Conexão PostgreSQL e Dockerfile para Replit

Este guia é adaptado especificamente para o ambiente do Replit, focando em como implantar sua aplicação Node.js/TypeScript com um banco de dados PostgreSQL, utilizando um Dockerfile e um script de entrada (`docker-entrypoint.sh`) robustos. Ele incorpora as melhores práticas observadas em projetos bem-sucedidos, garantindo que sua aplicação se conecte corretamente ao PostgreSQL provisionado pelo Replit e lide com as particularidades do ambiente.

## 1. Configuração do Dockerfile no Replit

O Dockerfile é a receita para construir a imagem do seu contêiner. No Replit, ele é usado para definir o ambiente de execução da sua aplicação. Siga este modelo para garantir uma configuração robusta:

### 1.1. Imagem Base

Use uma imagem Node.js leve. A versão `slim` é ideal para reduzir o tamanho final da imagem do seu Repl.

```dockerfile
FROM node:20-slim
```

### 1.2. Diretório de Trabalho

Defina o diretório de trabalho dentro do contêiner. É para onde o código do seu Repl será copiado.

```dockerfile
WORKDIR /app
```

### 1.3. Instalação de Ferramentas Essenciais

É crucial instalar o `postgresql-client` para que o script de entrada possa usar ferramentas como `pg_isready` e `psql` para verificar a conexão com o banco de dados e executar migrações.

```dockerfile
RUN apt-get update && apt-get install -y postgresql-client wget curl && rm -rf /var/lib/apt/lists/*
```

### 1.4. Copiar e Instalar Dependências

Copie os arquivos de dependência (`package.json`, `package-lock.json` ou `yarn.lock`) primeiro e instale-as. Isso otimiza o processo de build do Docker, pois as dependências só serão reinstaladas se esses arquivos mudarem.

```dockerfile
COPY package*.json ./
RUN npm ci
```

### 1.5. Copiar o Código da Aplicação

Copie o restante do código-fonte do seu Repl para o diretório de trabalho.

```dockerfile
COPY . .
```

### 1.6. Tornar Scripts Executáveis

Garanta que seu script de entrada (`docker-entrypoint.sh`) tenha permissões de execução.

```dockerfile
RUN chmod +x docker-entrypoint.sh
```

### 1.7. Build da Aplicação

Execute o comando de build da sua aplicação (se você estiver usando TypeScript, React, ou qualquer outra ferramenta que exija um processo de compilação).

```dockerfile
RUN npm run build
```

### 1.8. Exposição de Porta

Declare a porta em que sua aplicação estará escutando. No Replit, a porta padrão para aplicações web é geralmente `3000` ou `8080`, mas você pode configurar a sua. Certifique-se de que sua aplicação Node.js esteja escutando nesta porta.

```dockerfile
EXPOSE 5000 # Substitua 5000 pela porta real da sua aplicação (ex: 3000, 8080)
```

### 1.9. Variáveis de Ambiente Padrão

Defina variáveis de ambiente com valores padrão. A `DATABASE_URL` é a mais crítica. No Replit, quando você adiciona um banco de dados PostgreSQL, ele geralmente provisiona uma `DATABASE_URL` automaticamente. No entanto, é uma boa prática ter um fallback aqui.

```dockerfile
ENV DATABASE_URL=${DATABASE_URL:-postgres://usuario:senha@host_db:5432/nome_do_banco?sslmode=disable}
ENV NODE_ENV=${NODE_ENV:-production}
ENV PORT=${PORT:-5000} # Deve corresponder à porta EXPOSE
```

### 1.10. Healthcheck (Opcional, mas Recomendado)

Um healthcheck ajuda o Replit a saber se sua aplicação está funcionando corretamente.

```dockerfile
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
  CMD wget -qO- http://localhost:${PORT}/health || exit 1
```

### 1.11. Ponto de Entrada e Comando de Inicialização

Use o `docker-entrypoint.sh` para a lógica de inicialização e o `CMD` para iniciar a aplicação principal.

```dockerfile
ENTRYPOINT ["./docker-entrypoint.sh"]
CMD ["npm", "run", "start"]
```

## 2. Conexão com PostgreSQL e `docker-entrypoint.sh` no Replit

O `docker-entrypoint.sh` é essencial para garantir que sua aplicação se conecte corretamente ao PostgreSQL do Replit e execute tarefas de inicialização. Ele deve ser robusto para lidar com as variáveis de ambiente do Replit.

### 2.1. Estrutura Básica do `docker-entrypoint.sh`

```bash
#!/bin/bash
set -e

echo ">>> Iniciando script de entrada da Aplicação no Replit <<<"

# 1. Validar Variáveis de Ambiente Essenciais
# No Replit, a DATABASE_URL é geralmente provisionada automaticamente.
# Garante que DATABASE_URL esteja definida. Se não estiver, o script falha.
: "${DATABASE_URL:?Variável DATABASE_URL não está configurada. Verifique as variáveis secretas do seu Repl ou o add-on de banco de dados.}"
: "${NODE_ENV:?Variável NODE_ENV não está configurada}"
: "${PORT:?Variável PORT não está configurada}"

# 2. Extrair Informações de Conexão da DATABASE_URL
# Esta é a parte CRÍTICA para o Replit e outros ambientes de deploy.
# O Replit (e outros orquestradores como EasyPanel) podem injetar variáveis PG* (PGDATABASE, PGUSER, etc.)
# que podem sobrescrever o nome do banco de dados ou outras partes da DATABASE_URL.
# Ao extrair as informações da DATABASE_URL, garantimos que ela seja a única fonte de verdade.

# Desdefinir variáveis PG* e POSTGRES_* para evitar conflitos com a DATABASE_URL
# Isso é uma medida de segurança para garantir que o driver use APENAS a DATABASE_URL.
unset PGDATABASE
unset PGUSER
unset PGPASSWORD
unset PGHOST
unset PGPORT
unset POSTGRES_DB
unset POSTGRES_USER
unset POSTGRES_PASSWORD
unset POSTGRES_HOST
unset POSTGRES_PORT

# Extrair componentes da DATABASE_URL para pg_isready
# Usamos sed para parsear a URL. Adapte se sua URL tiver um formato muito diferente.
PGHOST=$(echo $DATABASE_URL | sed -E 's/^.*@([^:]+):.*/\1/' 2>/dev/null || echo "localhost")
PGPORT=$(echo $DATABASE_URL | sed -E 's/^.*:([0-9]+).*/\1/' 2>/dev/null || echo "5432")
PGUSER=$(echo $DATABASE_URL | sed -E 's/^.*:\/\/([^:]+):.*/\1/' 2>/dev/null || echo "postgres")

# 3. Aguardar o Banco de Dados Estar Pronto
# Usa pg_isready para verificar a conectividade do PostgreSQL.
echo "Aguardando inicialização do PostgreSQL..."
MAX_ATTEMPTS=30
ATTEMPTS=0

check_db_connection() {
  # Adapte esta função se você tiver SSL no seu DATABASE_URL e precisar de curl
  # A maioria das conexões Replit PostgreSQL usará SSL.
  # Para conexões SSL, pg_isready pode não funcionar diretamente sem o certificado.
  # Uma alternativa é tentar uma conexão psql simples ou usar curl se o DB expuser HTTP.
  # Para simplicidade, vamos tentar pg_isready, que funciona para muitas configurações.
  pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" > /dev/null 2>&1
  return $?
}

while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
  if check_db_connection; then
    echo "PostgreSQL está pronto!"
    break
  fi
  ATTEMPTS=$((ATTEMPTS+1))
  echo "PostgreSQL não está pronto ainda - tentativa $ATTEMPTS de $MAX_ATTEMPTS - esperando..."
  sleep 2
done

if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
  echo "Não foi possível conectar ao PostgreSQL após $MAX_ATTEMPTS tentativas. Verifique a conexão e a DATABASE_URL."
  exit 1
fi

echo "Banco de dados conectado com sucesso!"

# 4. Executar Migrações (Exemplo com Drizzle)
# Verifica se as tabelas já existem para evitar re-execução desnecessária de migrações.
# Adapte 'public.users' para uma tabela que você sabe que existe após a primeira migração.
echo "Verificando se as tabelas do banco de dados existem..."
if psql "$DATABASE_URL" -c "SELECT to_regclass(\'public.users\');" | grep -q "users"; then
  echo "Tabela \'users\' já existe, pulando migração."
else
  echo "Tabela \'users\' não existe. Executando migração inicial..."
  NODE_ENV=production npm run db:push
  # Adicione aqui lógica para verificar o sucesso da migração e lidar com falhas
fi

echo ">>> Configuração do banco de dados concluída <<<"

# 5. Iniciar a Aplicação
# O 'exec "$@"' garante que o comando CMD do Dockerfile seja executado como o processo principal do contêiner.
echo "Iniciando aplicação na porta $PORT..."
exec "$@"
```

### 2.2. Pontos Chave do `docker-entrypoint.sh` para Replit

*   **`set -e`**: Garante que o script saia imediatamente se qualquer comando falhar.
*   **Validação de `DATABASE_URL`**: O Replit geralmente injeta a `DATABASE_URL` automaticamente. Este passo garante que ela esteja presente.
*   **Desdefinição de Variáveis `PG*`**: **Este é um passo crucial para o Replit e EasyPanel.** O Replit pode injetar variáveis como `PGDATABASE`, `PGUSER`, etc., que podem conflitar com a `DATABASE_URL` completa. Desdefini-las garante que o driver PostgreSQL use *apenas* a `DATABASE_URL`.
*   **Extração da `DATABASE_URL`**: As informações de host, porta e usuário são extraídas *da* `DATABASE_URL` para uso com `pg_isready`, garantindo consistência.
*   **Loop de Espera pelo DB (`pg_isready`)**: A aplicação não tenta iniciar antes que o banco de dados esteja acessível. O `pg_isready` é uma ferramenta robusta para verificar a conectividade do PostgreSQL.
*   **Migrações Condicionais**: A lógica para verificar a existência de tabelas antes de executar migrações é uma boa prática para evitar erros em re-deploys ou reinícios de contêineres.
*   **`exec "$@"`**: Este comando é fundamental. Ele substitui o processo atual do shell pelo comando `CMD` do Dockerfile, garantindo que sua aplicação seja o processo principal do contêiner e receba sinais corretamente.

## 3. Estratégia de Deploy no Replit

O Replit simplifica muito o processo de deploy, mas entender como ele interage com seu Dockerfile e variáveis de ambiente é importante.

### 3.1. Gerenciamento de Variáveis de Ambiente no Replit

*   **Secrets do Replit**: Para variáveis de ambiente sensíveis (como `DATABASE_URL`, `SESSION_SECRET`, etc.), utilize a seção 


de `Secrets` do Replit. Isso garante que essas informações não sejam expostas no seu código-fonte e sejam injetadas de forma segura no ambiente do contêiner.
*   **Variáveis de Ambiente do Replit**: O Replit pode injetar variáveis de ambiente automaticamente (como a `DATABASE_URL` para bancos de dados provisionados por ele). O `docker-entrypoint.sh` que você usará está preparado para lidar com isso, priorizando a `DATABASE_URL` completa.

### 3.2. Processo de Build e Deploy no Replit

1.  **Configuração do Repl**: Certifique-se de que seu Repl esteja configurado para usar o Dockerfile. No Replit, geralmente, se você tiver um `Dockerfile` na raiz do seu projeto, ele será detectado automaticamente.
2.  **Variáveis de Ambiente (Secrets)**: Adicione todas as variáveis de ambiente necessárias (especialmente a `DATABASE_URL` se você não estiver usando um banco de dados provisionado pelo Replit ou se precisar de uma URL específica) na seção `Secrets` do seu Repl.
3.  **Início do Repl**: Ao iniciar seu Repl, o Replit construirá a imagem Docker usando seu Dockerfile. O `docker-entrypoint.sh` será executado, aguardará o banco de dados, executará as migrações e iniciará sua aplicação.
4.  **Monitoramento**: Monitore os logs do seu Repl para garantir que a inicialização ocorra sem erros e que a conexão com o banco de dados seja estabelecida com sucesso. Quaisquer erros no `docker-entrypoint.sh` ou na conexão com o DB aparecerão aqui.

## Conclusão

Ao seguir este guia, você terá uma aplicação Node.js/TypeScript com PostgreSQL configurada de forma robusta para o ambiente do Replit. A chave para o sucesso reside em:

*   **Dockerfile bem definido**: Para um ambiente de contêiner consistente.
*   **`docker-entrypoint.sh` inteligente**: Que valida variáveis, aguarda o banco de dados, executa migrações e, crucialmente, prioriza a `DATABASE_URL` completa, desconsiderando variáveis `PG*` conflitantes que o Replit ou outros orquestradores possam injetar.
*   **Gerenciamento adequado de Secrets**: Para manter suas credenciais seguras.

Com esta configuração, você minimiza os problemas de conexão e garante que sua aplicação esteja sempre pronta para funcionar no Replit.


vou usar essa url do postgres
postgres://estruturas:1234@viajey_cassio:5432/almoxarifado?sslmode=disable
